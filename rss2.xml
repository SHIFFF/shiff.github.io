<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>微弱的光</title>
    <link>http://shiff.top/</link>
    
    <atom:link href="http://shiff.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>千里之行，始于足下</description>
    <pubDate>Sun, 12 May 2024 15:25:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>leetcode热题hot100</title>
      <link>http://shiff.top/2024/05/12/leetcode%E7%83%AD%E9%A2%98hot100/</link>
      <guid>http://shiff.top/2024/05/12/leetcode%E7%83%AD%E9%A2%98hot100/</guid>
      <pubDate>Sun, 12 May 2024 15:24:52 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;leetcode热题hot100【JS】&quot;&gt;&lt;a href=&quot;#leetcode热题hot100【JS】&quot; class=&quot;headerlink&quot; title=&quot;leetcode热题hot100【JS】&quot;&gt;&lt;/a&gt;leetcode热题hot100【JS】&lt;/h2&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="leetcode热题hot100【JS】"><a href="#leetcode热题hot100【JS】" class="headerlink" title="leetcode热题hot100【JS】"></a>leetcode热题hot100【JS】</h2><h2 id="JS中相关函数"><a href="#JS中相关函数" class="headerlink" title="JS中相关函数"></a>JS中相关函数</h2><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中插入数据</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr = [1]</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="number">1</span>);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个数组是否相等（只适用于数组里面的元素都是原始值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arraysAreEqual</span>(<span class="params">array1, array2</span>) &#123;</span><br><span class="line">    <span class="comment">// 首先检查数组长度</span></span><br><span class="line">    <span class="keyword">if</span> (array1.<span class="property">length</span> !== array2.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 然后检查每个元素是否相等</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array1[i] !== array2[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果通过了上述检查，那么数组相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组遍历</span></span><br><span class="line"><span class="keyword">let</span> strs = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i,strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for of 与entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [i, str] <span class="keyword">of</span> strs.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个字符转换成ASCII码字</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ASCIINum</span> = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);<span class="comment">//97</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 = <span class="string">&#x27;ab&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ASCIINum</span> = c.<span class="title function_">charCodeAt</span>(<span class="number">2</span>);<span class="comment">//98</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串分割成单个字符的数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">char</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(char));</span><br><span class="line"><span class="comment">// [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串字母排序 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 将字符串转换为数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 对数组进行排序</span></span><br><span class="line">    arr.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="comment">// 将数组转换回字符串</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> originalString = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sortedString = <span class="title function_">sortString</span>(originalString);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedString); <span class="comment">// 输出: ehllo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>在JavaScript中，<code>Map</code> 是一种新的数据结构，它允许你存储键值对（key-value pairs）。与对象不同，<code>Map</code> 的键可以是任何类型的值，包括函数、对象或任何原始类型。下面是一些基本的 <code>Map</code> 对象用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="string">`has`</span> 方法可以检查 <span class="string">`Map`</span> 中是否存在某个键：</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个 Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置键值对</span></span><br><span class="line"><span class="comment">//使用 `set` 方法可以添加或更新键值对：</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">map.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&#x27;Object&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;, <span class="string">&#x27;Function&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>)); <span class="comment">// 输出: &#x27;value&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="number">123</span>)); <span class="comment">// 输出: 456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查键是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;key&#x27;</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;notExist&#x27;</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除键值对</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Map的大小</span></span><br><span class="line"><span class="comment">//使用 `size` 属性可以获取 `Map` 中键值对的数量：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历Map</span></span><br><span class="line"><span class="comment">//`Map` 对象可以通过 `forEach` 方法遍历，也可以使用迭代器方法（如 `keys()`, `values()`, 和 `entries()`）进行遍历。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 `forEach` 遍历：</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用迭代器遍历：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者直接遍历Map对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空Map</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="1-两数之和【数组、哈希】"><a href="#1-两数之和【数组、哈希】" class="headerlink" title="1.两数之和【数组、哈希】"></a>1.两数之和【数组、哈希】</h3><p><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>code</strong>:</p><p>第一次写没有考虑到两个数的下标不能一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> res = [];</span><br><span class="line">        <span class="keyword">let</span> index;</span><br><span class="line">        <span class="keyword">if</span>(( index = nums.<span class="title function_">indexOf</span>(target - nums[i])) != -<span class="number">1</span> &amp;&amp; index != i)&#123;</span><br><span class="line">            res.<span class="title function_">push</span>(i);</span><br><span class="line">            res.<span class="title function_">push</span>(index);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="49-字母异位词分组【数组、哈希、字符串】"><a href="#49-字母异位词分组【数组、哈希、字符串】" class="headerlink" title="49. 字母异位词分组【数组、哈希、字符串】"></a>49. 字母异位词分组【数组、哈希、字符串】</h3><p><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></p><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 104</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul><p><strong>code</strong></p><p>一开始的想法是对每一个字符串的ASCII码求和，和一样的字符串就是字母异位词，但是仔细想一下就知道这样不对，即使字符不一样，也可能会出现SASCII码一样的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误的</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//遍历每一个字符串</span></span><br><span class="line">        <span class="keyword">let</span> sumASCII = <span class="number">0</span>;</span><br><span class="line">        strs[i].<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">c</span> =&gt;</span> sumASCII += c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(hash.<span class="title function_">has</span>(sumASCII))&#123;<span class="comment">//存在同样的</span></span><br><span class="line">            <span class="keyword">let</span> arr = hash.<span class="title function_">get</span>(sumASCII);</span><br><span class="line">            arr.<span class="title function_">push</span>(strs[i]);</span><br><span class="line">            hash.<span class="title function_">set</span>(sumASCII, arr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            arr.<span class="title function_">push</span>(strs[i]);</span><br><span class="line">            hash.<span class="title function_">set</span>(sumASCII,arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    hash.<span class="title function_">forEach</span>( <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了官方解法,有两种解法，排序和计数，很好的解法</p><p><strong>排序</strong></p><p>思路和上面的ASCII码的思路是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mp = <span class="keyword">new</span> <span class="title class_">Map</span>();<span class="comment">//哈希表，&lt;str, arr&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> [i, str] <span class="keyword">of</span> strs.<span class="title function_">entries</span>())&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>();</span><br><span class="line">        <span class="keyword">let</span> newStr = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="title function_">has</span>(newStr))&#123;<span class="comment">//存过了</span></span><br><span class="line">            <span class="keyword">let</span> subArr = mp.<span class="title function_">get</span>(newStr);</span><br><span class="line">            subArr.<span class="title function_">push</span>(str);</span><br><span class="line">            mp.<span class="title function_">set</span>(newStr, subArr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> subArr = [];</span><br><span class="line">            subArr.<span class="title function_">push</span>(str);</span><br><span class="line">            mp.<span class="title function_">set</span>(newStr, subArr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    mp.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> res.<span class="title function_">push</span>(value));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="http://shiff.top/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://shiff.top/tags/leetcode/">leetcode</category>
      
      
      <comments>http://shiff.top/2024/05/12/leetcode%E7%83%AD%E9%A2%98hot100/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>双指针：两个输入,两个都需要遍历（快慢指针）</title>
      <link>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%A4%E4%B8%AA%E8%BE%93%E5%85%A5-%E4%B8%A4%E4%B8%AA%E9%83%BD%E9%9C%80%E8%A6%81%E9%81%8D%E5%8E%86%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/</link>
      <guid>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%A4%E4%B8%AA%E8%BE%93%E5%85%A5-%E4%B8%A4%E4%B8%AA%E9%83%BD%E9%9C%80%E8%A6%81%E9%81%8D%E5%8E%86%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/</guid>
      <pubDate>Fri, 10 May 2024 08:41:08 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;2-双指针：两个输入-两个都需要遍历（快慢指针）&quot;&gt;&lt;a href=&quot;#2-双指针：两个输入-两个都需要遍历（快慢指针）&quot; class=&quot;headerlink&quot; title=&quot;2.双指针：两个输入,两个都需要遍历（快慢指针）&quot;&gt;&lt;/a&gt;2.双指针：两个输入,两个都</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="2-双指针：两个输入-两个都需要遍历（快慢指针）"><a href="#2-双指针：两个输入-两个都需要遍历（快慢指针）" class="headerlink" title="2.双指针：两个输入,两个都需要遍历（快慢指针）"></a>2.双指针：两个输入,两个都需要遍历（快慢指针）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">arr1, arr2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(i &lt; arr1.<span class="property">length</span> &amp;&amp; j &lt; arr2.<span class="property">length</span>)&#123;</span><br><span class="line">    <span class="comment">//根据题意补充代码</span></span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; arr1.<span class="property">length</span>)&#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; arr2.<span class="property">length</span>)&#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://leetcode.cn/problems/merge-sorted-array/">88. 合并两个有序数组</a></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p>思路一：双指针，但是不借助额外的数组，原数组nums1的值就会被覆盖，但是题目没有说不能借助额外数组，所以就先放到新的数组里面，在把新数组赋值给nuns1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//思路一：双指针，但是不借助额外的数组，原数组nums1的值就会被覆盖，但是题目没有说不能借助额外数组，所以就先放到新的数组里面，在把新数组赋值给nuns1</span></span><br><span class="line">    <span class="keyword">let</span> newArr = <span class="keyword">new</span> <span class="title class_">Array</span>(m + n);</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums2[j] &lt;= nums1[i])&#123;</span><br><span class="line">            newArr[k++] = nums2[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            newArr[k++] = nums1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; m) newArr[k++] = nums1[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt; n) newArr[k++] = nums2[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> p = <span class="number">0</span>; p &lt; m + n; p++)&#123;</span><br><span class="line">        nums1[p] = newArr[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路二：逆向双指针，因为num1的数组的末尾m个都是0，是不害怕被覆盖的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>, k = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1[i] &gt;= nums2[j])&#123;</span><br><span class="line">            nums1[k--] = nums1[i--];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[k--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span>) nums1[k--] = nums1[i--];</span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span>) nums1[k--] = nums2[j--];</span><br><span class="line">    <span class="keyword">return</span> nums1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="http://shiff.top/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%A4%E4%B8%AA%E8%BE%93%E5%85%A5-%E4%B8%A4%E4%B8%AA%E9%83%BD%E9%9C%80%E8%A6%81%E9%81%8D%E5%8E%86%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>双指针：一个输入，两端遍历（两边夹）</title>
      <link>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%EF%BC%8C%E4%B8%A4%E7%AB%AF%E9%81%8D%E5%8E%86%EF%BC%88%E4%B8%A4%E8%BE%B9%E5%A4%B9%EF%BC%89/</link>
      <guid>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%EF%BC%8C%E4%B8%A4%E7%AB%AF%E9%81%8D%E5%8E%86%EF%BC%88%E4%B8%A4%E8%BE%B9%E5%A4%B9%EF%BC%89/</guid>
      <pubDate>Fri, 10 May 2024 08:04:21 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;双指针：一个输入，两端遍历（两边夹）&quot;&gt;&lt;a href=&quot;#双指针：一个输入，两端遍历（两边夹）&quot; class=&quot;headerlink&quot; title=&quot;双指针：一个输入，两端遍历（两边夹）&quot;&gt;&lt;/a&gt;双指针：一个输入，两端遍历（两边夹）&lt;/h3&gt;&lt;figure c</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="双指针：一个输入，两端遍历（两边夹）"><a href="#双指针：一个输入，两端遍历（两边夹）" class="headerlink" title="双指针：一个输入，两端遍历（两边夹）"></a>双指针：一个输入，两端遍历（两边夹）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//箭头函数 ()=&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">//()表示参数</span></span><br><span class="line"><span class="comment">//&#123;&#125;表示函数体</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = arr =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, ans = <span class="number">0</span>, right = arr.<span class="property">length</span> -<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">    <span class="comment">//根据题意补充代码</span></span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></p><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p><strong>示例 1：</strong></p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1 </span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= height[i] &lt;= 104</code></li></ul><p>做题思路：</p><p>双指针</p><p>长*宽的最大值，迭代</p><p>难点在于在什么情况下移动左指针，在什么情况下移动右指针</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span>(<span class="params">height</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = height.<span class="property">length</span> - <span class="number">1</span>, maxAns = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">let</span> w = right - left;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right]);</span><br><span class="line">        maxAns = <span class="title class_">Math</span>.<span class="title function_">max</span>(w * h, maxAns);</span><br><span class="line">        <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxAns</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考官方题解</p><p><a href="https://leetcode.cn/problems/container-with-most-water/solutions/207215/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution">https://leetcode.cn/problems/container-with-most-water/solutions/207215/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution</a></p>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="http://shiff.top/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://shiff.top/2024/05/10/%E5%8F%8C%E6%8C%87%E9%92%88%EF%BC%9A%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%EF%BC%8C%E4%B8%A4%E7%AB%AF%E9%81%8D%E5%8E%86%EF%BC%88%E4%B8%A4%E8%BE%B9%E5%A4%B9%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Vue】v-bind</title>
      <link>http://shiff.top/2024/04/24/%E3%80%90Vue%E3%80%91v-bind/</link>
      <guid>http://shiff.top/2024/04/24/%E3%80%90Vue%E3%80%91v-bind/</guid>
      <pubDate>Wed, 24 Apr 2024 08:47:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;v-bind&quot;&gt;&lt;a href=&quot;#v-bind&quot; class=&quot;headerlink&quot; title=&quot;v-bind&quot;&gt;&lt;/a&gt;v-bind&lt;/h1&gt;&lt;p&gt; 是Vue.js中的一个指令，用于动态地绑定一个或多个属性，或者传递属性到组件。它可以将数据的值绑定到HTM</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><p> 是Vue.js中的一个指令，用于动态地绑定一个或多个属性，或者传递属性到组件。它可以将数据的值绑定到HTML元素的属性上，或者是父组件向子组件传递数据。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li><strong>绑定HTML属性</strong>：可以将数据绑定到元素的属性上。例如，如果你想根据数据动态改变<img>的src属性，可以这样写：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-<span class="attr">bind</span>:src=<span class="string">&quot;imageSrc&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这里，imageSrc是一个变量名，它的值会被设置为img的src属性。</p><ul><li><strong>缩写</strong>：v-bind:有一个缩写，即冒号:。上面的例子可以简写为：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;imageSrc&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定多个属性"><a href="#绑定多个属性" class="headerlink" title="绑定多个属性"></a>绑定多个属性</h3><p>v-bind也可以通过使用对象语法一次绑定多个属性。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind=<span class="string">&quot;&#123; id: someId, &#x27;data-name&#x27;: name &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这里，someId和name是变量，它们的值将分别绑定到div的id属性和data-name属性。</p><h3 id="绑定到组件的props"><a href="#绑定到组件的props" class="headerlink" title="绑定到组件的props"></a>绑定到组件的props</h3><p>当使用组件时，v-bind用于将数据从父组件传递到子组件的props：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component :some-prop=<span class="string">&quot;someData&quot;</span>&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure><p>这里，someData是父组件中的数据，some-prop是子组件的prop，someData的值将传递给子组件的some-prop。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>动态绑定元素的类和样式。</p><p>将数据传递给组件的props。</p><p>根据数据动态改变元素的属性，如src、href等。</p><p>v-bind:是Vue开发中非常常用的一个指令，它提高了代码的灵活性和可维护性，使得数据和视图之间的绑定更加直观和方便。</p>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/Vue3/">Vue3</category>
      
      <category domain="http://shiff.top/tags/Vue2/">Vue2</category>
      
      
      <comments>http://shiff.top/2024/04/24/%E3%80%90Vue%E3%80%91v-bind/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>鉴权失败</title>
      <link>http://shiff.top/2024/04/24/%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</link>
      <guid>http://shiff.top/2024/04/24/%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/</guid>
      <pubDate>Wed, 24 Apr 2024 08:35:46 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;【git部署时输入密码错误】remote-Support-for-password-authentication-was-removed-on-August-13-2021-remote-Please-see-https-docs-github-com-get-s</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="【git部署时输入密码错误】remote-Support-for-password-authentication-was-removed-on-August-13-2021-remote-Please-see-https-docs-github-com-get-started-getting-started-with-git-about-remote-repositories-cloning-with-https-urls-for-information-on-currently-recommended-modes-of-authentication-致命错误：’https-github-com-SHIFFF-SHIFFF-github-io-git-‘-鉴权失败"><a href="#【git部署时输入密码错误】remote-Support-for-password-authentication-was-removed-on-August-13-2021-remote-Please-see-https-docs-github-com-get-started-getting-started-with-git-about-remote-repositories-cloning-with-https-urls-for-information-on-currently-recommended-modes-of-authentication-致命错误：’https-github-com-SHIFFF-SHIFFF-github-io-git-‘-鉴权失败" class="headerlink" title="【git部署时输入密码错误】remote: Support for password authentication was removed on August 13, 2021. remote: Please see https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication. 致命错误：’https://github.com/SHIFFF/SHIFFF.github.io.git/‘ 鉴权失败"></a>【git部署时输入密码错误】remote: Support for password authentication was removed on August 13, 2021. remote: Please see <a href="https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls">https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls</a> for information on currently recommended modes of authentication. 致命错误：’<a href="https://github.com/SHIFFF/SHIFFF.github.io.git/">https://github.com/SHIFFF/SHIFFF.github.io.git/</a>‘ 鉴权失败</h3><p>GitHub于2021年8月13日移除了对密码身份验证的支持，因此您需要使用其他身份验证方式来访问GitHub仓库。</p><p>推荐的替代方式是使用个人访问令牌（Personal Access Token）作为身份验证凭据。您可以在GitHub上生成一个个人访问令牌，并将其用作密码来访问您的仓库。</p><p>以下是解决此问题的一般步骤：</p><ol><li><p>在GitHub上生成个人访问令牌：</p><ul><li>登录GitHub账号，转到Settings -&gt; Developer settings -&gt; Personal access tokens。</li><li>点击Generate new token，选择所需的权限，并生成访问令牌。</li><li>复制生成的访问令牌。</li></ul></li><li><p>在Git中使用个人访问令牌：</p><ul><li>当Git提示输入用户名和密码时，用户名为您的GitHub用户名，密码为您生成的个人访问令牌。</li></ul></li></ol><p>通过这种方式，您应该能够成功进行身份验证并访问您的GitHub仓库。如果问题仍然存在，请参考提供的链接以获取更多信息或尝试其他解决方案。</p>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/git/">git</category>
      
      <category domain="http://shiff.top/tags/error/">error</category>
      
      
      <comments>http://shiff.top/2024/04/24/%E9%89%B4%E6%9D%83%E5%A4%B1%E8%B4%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Vue3】withDefaults和defineProps</title>
      <link>http://shiff.top/2024/04/24/%E3%80%90Vue3%E3%80%91withDefaults%E5%92%8CdefineProps/</link>
      <guid>http://shiff.top/2024/04/24/%E3%80%90Vue3%E3%80%91withDefaults%E5%92%8CdefineProps/</guid>
      <pubDate>Wed, 24 Apr 2024 07:47:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在Vue 3中，withDefaults和defineProps是用于定义和设置组件的props的工具，特别是在使用script setup语法糖时。&lt;/p&gt;
&lt;h3 id=&quot;defineProps&quot;&gt;&lt;a href=&quot;#defineProps&quot; class=&quot;header</description>
        
      
      
      
      <content:encoded><![CDATA[<p>在Vue 3中，withDefaults和defineProps是用于定义和设置组件的props的工具，特别是在使用script setup语法糖时。</p><h3 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h3><p>defineProps函数用于在Vue组件中声明props的类型。它通常与TypeScript一起使用，以提供类型安全。在script setup语法中，defineProps用于定义接收自父组件的数据的属性。</p><h3 id="withDefaults"><a href="#withDefaults" class="headerlink" title="withDefaults"></a>withDefaults</h3><p>withDefaults函数在Vue 3中用于为defineProps定义的props提供默认值。它的参数结构如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Type</span>&gt;(), defaultProps)</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数是defineProps调用的结果，defineProps<Type>()用于定义组件的props，并且可以指定一个TypeScript接口或类型来静态类型检查这些props。</p></li><li><p>第二个参数是一个对象，其中的键是prop的名字，值是这个prop的默认值。默认值可以是直接的值，或者是返回值的函数，这样每次使用默认值时都会调用该函数来获取一个新的值。</p></li></ul><p>例如</p><p>withDefaults函数用于为defineProps定义的props提供默认值。这是处理props可能未被父组件传递时的情况的一种方式，确保组件有一个可靠的默认状态。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineProps, withDefaults &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">postList</span>: <span class="built_in">any</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(),&#123;</span><br><span class="line">  <span class="attr">postList</span>: <span class="function">() =&gt;</span> [],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>defineProps<Props>()：这里使用Props接口来定义props的结构，Props接口指定了postList是一个数组。</p></li><li><p>withDefaults(…, { postList: () &#x3D;&gt; [] })：这里为postList提供了一个默认值。默认值是通过一个函数() &#x3D;&gt; []来指定的，这意味着如果没有提供postList，它将默认为一个空数组。使用函数来返回默认值是一种常见的做法，因为这确保了每次使用默认值时都会创建一个新的数组实例，避免了不同实例间共享同一个数组的问题。</p></li></ul><h3 id="postList-x3D-gt-的意思"><a href="#postList-x3D-gt-的意思" class="headerlink" title="postList: () &#x3D;&gt; []的意思"></a>postList: () &#x3D;&gt; []的意思</h3><p>这里postList: () &#x3D;&gt; []表示postList的默认值是一个空数组。使用箭头函数()返回一个新的空数组[]，这样做的好处是每次调用这个默认值时都会创建一个新的数组实例，避免了潜在的引用类型数据共享问题，这是在JavaScript中处理数组和对象默认值的推荐做法。</p><p>总结来说，这种写法确保了组件的postList prop在没有从父组件接收到值时，会安全地使用一个新的空数组作为默认值，同时保持了类型安全和响应性。</p>]]></content:encoded>
      
      
      
      <category domain="http://shiff.top/tags/Vue3/">Vue3</category>
      
      <category domain="http://shiff.top/tags/TypeScript/">TypeScript</category>
      
      
      <comments>http://shiff.top/2024/04/24/%E3%80%90Vue3%E3%80%91withDefaults%E5%92%8CdefineProps/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【哈希+map】2404.出现最频繁的偶数元素</title>
      <link>http://shiff.top/2023/04/13/%E5%87%BA%E7%8E%B0%E6%9C%80%E9%A2%91%E7%B9%81%E7%9A%84%E5%81%B6%E6%95%B0%E5%85%83%E7%B4%A0/</link>
      <guid>http://shiff.top/2023/04/13/%E5%87%BA%E7%8E%B0%E6%9C%80%E9%A2%91%E7%B9%81%E7%9A%84%E5%81%B6%E6%95%B0%E5%85%83%E7%B4%A0/</guid>
      <pubDate>Wed, 12 Apr 2023 17:40:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;【哈希-map】2404-出现最频繁的偶数元素&quot;&gt;&lt;a href=&quot;#【哈希-map】2404-出现最频繁的偶数元素&quot; class=&quot;headerlink&quot; title=&quot;【哈希+map】2404. 出现最频繁的偶数元素&quot;&gt;&lt;/a&gt;【哈希+map】2404. 出现</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="【哈希-map】2404-出现最频繁的偶数元素"><a href="#【哈希-map】2404-出现最频繁的偶数元素" class="headerlink" title="【哈希+map】2404. 出现最频繁的偶数元素"></a>【哈希+map】2404. 出现最频繁的偶数元素</h2><blockquote><p> Problem: <a href="https://leetcode.cn/problems/most-frequent-even-element/description/">2404. 出现最频繁的偶数元素</a></p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>从数组中找出出现次数最多的偶数（如果这样的数有多个，选取较小的那个）</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>原本的想法是使用map+set，map当作哈希表用来计数，set来记录出现次数最多的偶数，(看了大佬的代码)后来优化了只用map，使用int变量res记录出现次数最多的偶数，如果出现次数一样多，且这个数较小，则更新res。</p><p>顺便复习了下C++中map和set的用法，这两个都只能通过使用迭代器遍历，但是map可以通过map[key]的方式来访问和赋值，可使用的函数用<code>begin()</code>、<code>end()</code>、<code>find()</code>、<code>clear()</code>等等。</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: </p><blockquote><p>$O(n)$</p></blockquote></li><li><p>空间复杂度: </p><blockquote><p>$O(n)$</p></blockquote></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>原版:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">原版</span></span><br><span class="line"><span class="comment">从数组中找出出现次数最多的偶数（如果这样的数有多个，选取较小的那个）</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mostFrequentEven</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录偶数出现的次数,存在mp中</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.<span class="built_in">find</span>(num)==mp.<span class="built_in">end</span>())&#123;<span class="comment">//找不到</span></span><br><span class="line">                    mp[num] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mp[num]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到mp中的最大值进行插入</span></span><br><span class="line">        <span class="type">int</span> max =  <span class="number">-1</span>;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second &gt; max)&#123;</span><br><span class="line">                max = it-&gt;second;<span class="comment">//更新最大值</span></span><br><span class="line">                res.<span class="built_in">clear</span>();</span><br><span class="line">                res.<span class="built_in">insert</span>(it-&gt;first);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(it-&gt;second == max)&#123;</span><br><span class="line">                res.<span class="built_in">insert</span>(it-&gt;first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> *(res.<span class="built_in">begin</span>());</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>简单优化后:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">简单优化后</span></span><br><span class="line"><span class="comment">从数组中找出出现次数最多的偶数（如果这样的数有多个，选取较小的那个）</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mostFrequentEven</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录偶数出现的次数,存在mp中</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp.<span class="built_in">find</span>(num)==mp.<span class="built_in">end</span>())&#123;<span class="comment">//找不到</span></span><br><span class="line">                    mp[num] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mp[num]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到mp中的最大值进行插入</span></span><br><span class="line">        <span class="type">int</span> max =  <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> res;</span><br><span class="line">        <span class="keyword">for</span>(unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second &gt; max)&#123;</span><br><span class="line">                max = it-&gt;second;<span class="comment">//更新最大值</span></span><br><span class="line">                res = it-&gt;first;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(it-&gt;second == max &amp;&amp; res &gt; it-&gt;first)&#123;</span><br><span class="line">                 res = it-&gt;first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://shiff.top/categories/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/">每日一题</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023-4-13/">2023.4.13</category>
      
      
      <category domain="http://shiff.top/tags/%E6%95%B0%E7%BB%84/">数组</category>
      
      <category domain="http://shiff.top/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="http://shiff.top/tags/%E5%93%88%E5%B8%8C/">哈希</category>
      
      
      <comments>http://shiff.top/2023/04/13/%E5%87%BA%E7%8E%B0%E6%9C%80%E9%A2%91%E7%B9%81%E7%9A%84%E5%81%B6%E6%95%B0%E5%85%83%E7%B4%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【贪心+模拟】 1147. 段式回文</title>
      <link>http://shiff.top/2023/04/13/%C2%B6I%CC%82E%CC%82%C2%BD%C2%BB%C3%98I%CC%82A%CC%88/</link>
      <guid>http://shiff.top/2023/04/13/%C2%B6I%CC%82E%CC%82%C2%BD%C2%BB%C3%98I%CC%82A%CC%88/</guid>
      <pubDate>Wed, 12 Apr 2023 17:22:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;【13】贪心-模拟-1147-段式回文&quot;&gt;&lt;a href=&quot;#【13】贪心-模拟-1147-段式回文&quot; class=&quot;headerlink&quot; title=&quot;【13】贪心+模拟 1147. 段式回文&quot;&gt;&lt;/a&gt;【13】贪心+模拟 1147. 段式回文&lt;/h2&gt;&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="【13】贪心-模拟-1147-段式回文"><a href="#【13】贪心-模拟-1147-段式回文" class="headerlink" title="【13】贪心+模拟 1147. 段式回文"></a>【13】贪心+模拟 1147. 段式回文</h2><p> Problem: <a href="https://leetcode.cn/problems/longest-chunked-palindrome-decomposition/description/">1147. 段式回文</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>  拆分字符串，使得拆分的字符串的前部分和后部分完全相同，返回能够拆分出的最大子串数</p><p>  贪心：拆分时，能拆就拆&#x3D;&gt;拆分后的字符串尽可能的长&#x3D;&gt;能够拆分出尽可能多的子串</p><p> 从小到大递归子串长度，模拟切割</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>  递归：<br>     含义：当前字符串，能够拆分出的最大子串数<br>     边界：不能拆&#x3D;&gt;空字符串&#x3D;&gt;长度为0</p><p>  字符串的切片[(par1)..(par2)] &#x3D;&gt;[par1,par2) 左闭右开</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度:  O(n^2)</p></li><li><p>空间复杂度: O(n)</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><code>s.substr(i,b)</code>: <code>i</code>表示从第<code>i</code>个位置开始选取长度为<code>b</code>的子串，<strong>b省略</strong>默认取到字符串末尾</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestDecomposition</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = text.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归边界,长度为0不能拆，返回子串数为0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n/<span class="number">2</span> ; i++)&#123;<span class="comment">//枚举前后缀长度,从小到大递归前后缀长度可以保证每次分割都是按能拆就拆的思想分割的</span></span><br><span class="line">            <span class="keyword">if</span>(text.<span class="built_in">substr</span>(<span class="number">0</span>,i)==text.<span class="built_in">substr</span>(n-i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span> + <span class="built_in">longestDecomposition</span>(text.<span class="built_in">substr</span>(i,n<span class="number">-2</span>*i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://shiff.top/categories/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/">每日一题</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2023-4-12/">2023.4.12</category>
      
      
      <category domain="http://shiff.top/tags/%E6%95%B0%E7%BB%84/">数组</category>
      
      <category domain="http://shiff.top/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      <category domain="http://shiff.top/tags/%E8%B4%AA%E5%BF%83/">贪心</category>
      
      
      <comments>http://shiff.top/2023/04/13/%C2%B6I%CC%82E%CC%82%C2%BD%C2%BB%C3%98I%CC%82A%CC%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>217.存在重复元素【简单】</title>
      <link>http://shiff.top/2023/03/16/217-%C2%B4%C3%A6O%CC%82U%CC%81O%CC%88%C3%98%C2%B8%C2%B4O%CC%82%C2%AAE%CC%88%C3%98%C2%A1%C2%BE%C2%BCo%CC%80%C2%B5%C2%A5%C2%A1%C2%BF/</link>
      <guid>http://shiff.top/2023/03/16/217-%C2%B4%C3%A6O%CC%82U%CC%81O%CC%88%C3%98%C2%B8%C2%B4O%CC%82%C2%AAE%CC%88%C3%98%C2%A1%C2%BE%C2%BCo%CC%80%C2%B5%C2%A5%C2%A1%C2%BF/</guid>
      <pubDate>Wed, 15 Mar 2023 20:36:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;217-存在重复元素【简单】&quot;&gt;&lt;a href=&quot;#217-存在重复元素【简单】&quot; class=&quot;headerlink&quot; title=&quot;217.存在重复元素【简单】&quot;&gt;&lt;/a&gt;217.存在重复元素【简单】&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="217-存在重复元素【简单】"><a href="#217-存在重复元素【简单】" class="headerlink" title="217.存在重复元素【简单】"></a>217.存在重复元素【简单】</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Problem: <a href="https://leetcode.cn/problems/contains-duplicate/description/">217. 存在重复元素</a></p><p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> （appears <strong>at least twice</strong>），返回 <code>true</code> ；如果数组中每个元素互不相同（distinct），返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h2 id="解题思路与代码"><a href="#解题思路与代码" class="headerlink" title="解题思路与代码"></a>解题思路与代码</h2><p><strong>思路一：</strong></p><p>初始化标记为false，数组中任意值如果出现了2次，就可以标记为true</p><p>对数值中的每个值出现次数计数，如果某个值在某次计数后出现次数等于2就标记为true。</p><p><strong>难点：</strong>不能用count[num]++来计数，因为nums[i]的取值是可以为负数的，但是数组不能有负索引号</p><p>**解决办法:**其实我上面的方法也是一种哈希表的方法，但我只用过C里面的map，对js中的map的用法不是很熟练，用map对象可以很好的解决负值的问题。暂时不写，还没理解map的用法。</p><p><strong>思路二：</strong></p><p>使用一个的新的数组，遍历<code>nums</code>数组，判断新数组<code>n</code>中是否存在<code>nums[i]</code>，若不存在，则将<code>nums[i]</code>插入新数组<code>n</code>；若存在，则返回true；</p><p>判断数组中是否有某个值存在的方法为<code>indexOf()</code></p><p><strong>思路三：</strong>（官方题解思路）</p><p>在对数字从小到大排序之后，数组的重复元素一定出现在相邻位置中。因此，我们可以扫描已排序的数组，每次判断相邻的两个元素是否相等，如果相等则说明存在重复的元素。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p>时间复杂度:<br> $O(n)$</p></li><li><p>空间复杂度:<br> $O(n)$</p></li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>解题思路一：</p><p>暂无</p><p>解题思路二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语言为JavaScript</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n.<span class="title function_">indexOf</span>(k)==-<span class="number">1</span>)&#123;<span class="comment">//不存在</span></span><br><span class="line">            n.<span class="title function_">push</span>(k);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面for/of循环的遍历是js的写法，是ES6新增的</span></span><br><span class="line">    <span class="comment">//下面的代码的for循环遍历方式是c中的惯用写法，是常规的for循环</span></span><br><span class="line">    <span class="comment">// for(let i = 0; i &lt; nums.length; i++)&#123;//遍历数组</span></span><br><span class="line">    <span class="comment">//     if(n.indexOf(nums[i])==-1)&#123;//不存在</span></span><br><span class="line">    <span class="comment">//         n.push(nums[i]);</span></span><br><span class="line">    <span class="comment">//     &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//         return true;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://shiff.top/categories/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/">学习计划</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="http://shiff.top/categories/LeetCode/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/">数组</category>
      
      
      <category domain="http://shiff.top/tags/%E6%95%B0%E7%BB%84/">数组</category>
      
      <category domain="http://shiff.top/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://shiff.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="http://shiff.top/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://shiff.top/2023/03/16/217-%C2%B4%C3%A6O%CC%82U%CC%81O%CC%88%C3%98%C2%B8%C2%B4O%CC%82%C2%AAE%CC%88%C3%98%C2%A1%C2%BE%C2%BCo%CC%80%C2%B5%C2%A5%C2%A1%C2%BF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>《JavaScript权威指南》读书笔记</title>
      <link>http://shiff.top/2023/03/16/%E3%80%8AjavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <guid>http://shiff.top/2023/03/16/%E3%80%8AjavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Wed, 15 Mar 2023 19:06:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;《javaScript权威指南》读书笔记&quot;&gt;&lt;a href=&quot;#《javaScript权威指南》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《javaScript权威指南》读书笔记&quot;&gt;&lt;/a&gt;《javaScript权威指南》读书笔记&lt;/h1&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="《javaScript权威指南》读书笔记"><a href="#《javaScript权威指南》读书笔记" class="headerlink" title="《javaScript权威指南》读书笔记"></a>《javaScript权威指南》读书笔记</h1><p>本书笔记基于David Flanagan的《javaScript权威指南》原书第七版中文译本，也就是犀牛书。</p><h2 id="词法结构"><a href="#词法结构" class="headerlink" title="词法结构"></a>词法结构</h2><h3 id="JavaScript程序的文本"><a href="#JavaScript程序的文本" class="headerlink" title="JavaScript程序的文本"></a>JavaScript程序的文本</h3><ul><li>区分大小写</li><li>忽略<strong>程序记号（token）</strong>之间的空格，很大程度上忽略换行符（也有例外）</li></ul><blockquote><p>不太理解什么叫程序记号</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*单行注释*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *多行注释</span></span><br><span class="line"><span class="comment"> *每行开头额外的*不是必需的，只是为了美观</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>直接出现在程序中的数据值，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">1.2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="标识符与保留字"><a href="#标识符与保留字" class="headerlink" title="标识符与保留字"></a>标识符与保留字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>用于命名常量、变量、属性、函数和类，就是一个名字，必需由<strong>字母，下划线，美元符号</strong>开头，可由<strong>字母、下划线、美元符号、数字</strong>组成。</p><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>一些不能作为标识符使用的单词，如for、if和while</p><p>当然还有一些比较复杂的情况，在一定情况下可以使用为标识符。不过最简单的做法就是不要使用这些单词作为标识符。</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>JavaScript程序由Unicode字符集编写，意味标识符可以使用Unicode字母、数字和象形文字（不支持表情符号）。</p><h4 id="Unicode转义序列"><a href="#Unicode转义序列" class="headerlink" title="Unicode转义序列"></a>Unicode转义序列</h4><p>由于某些计算机硬件和软件无法识别、处理Unicode字符，故定义了转义字符，以<code>\u</code>开头，后跟4为十六进制数或包含在一对花括号内的1~6位十六进制数字。</p><blockquote><p>花括号版本是ES6新增的</p></blockquote><p><img src="https://cdn.staticaly.com/gh/SHIFFF/Blogcdn@master/img/image-20230316020145144.png" alt="image-20230316020145144"></p><h4 id="Unicode归一化"><a href="#Unicode归一化" class="headerlink" title="Unicode归一化"></a>Unicode归一化</h4><p>由于不同编码方式的Unicode字符在js中是区分的，如下面的两个标识符</p><p><img src="https://cdn.staticaly.com/gh/SHIFFF/Blogcdn@master/img/image-20230316021128685.png" alt="image-20230316021128685"></p><p><img src="https://cdn.staticaly.com/gh/SHIFFF/Blogcdn@master/img/image-20230316021145803.png" alt="image-20230316021145803"></p><p>虽然看起来完全相同，但由于它们的二进制编码是不同的，所以js也会认为它们是不同的，这会导致看起来相同的两个标识符其实表示的是两个不同的标识符，在赋值等各个操作中会出现问题。</p><p>故在执行程序前，需要保证编辑器能够对源代码执行Unicode归一化。</p><h3 id="可选的分号"><a href="#可选的分号" class="headerlink" title="可选的分号"></a>可选的分号</h3><p>分号用于分隔语句。</p><p>分号可省略的情况：</p><ul><li><p>两条语句分别写在两行（不是一定的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span>;<span class="comment">//此时这个分号可以省略</span></span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span>;b = <span class="number">4</span>;<span class="comment">//分号是必须的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也不是所有的换行符都会被当作为分号,只有在不添加符号就无法解析代码的情况下才会把换行符当作分号</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line">a </span><br><span class="line">= </span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="comment">//会被解释为</span></span><br><span class="line"><span class="keyword">let</span> a; a = <span class="number">3</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这种机制会引发一些问题,如下面的例子</span></span><br><span class="line"><span class="keyword">let</span> y = x + f</span><br><span class="line">(a+b).<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//会被解释为</span></span><br><span class="line"><span class="keyword">let</span> y = x + <span class="title function_">f</span>(a+b).<span class="title function_">toString</span>();<span class="comment">//不一定与作者的真实意图一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一种情况，return、throw、yield、break、continue后面的换行符是一定会被解释为分号的</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line"><span class="comment">//一定会被解释为</span></span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line"><span class="literal">true</span>;</span><br><span class="line"><span class="comment">//故一定不能在这些保留字和他们后面的表达式之间加换行符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>另外，涉及到++、–操作符，必须与操作的表达式位于同一行。</p><p>箭头函数中的<code>=&gt;</code>也必须与参数列表在同一行</p></blockquote></li><li><p>在程序的末尾，接下来的加号是<code>&#125;</code></p></li></ul>]]></content:encoded>
      
      
      <category domain="http://shiff.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      <category domain="http://shiff.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/JavaScript/">JavaScript</category>
      
      
      <category domain="http://shiff.top/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://shiff.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      
      <comments>http://shiff.top/2023/03/16/%E3%80%8AjavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
